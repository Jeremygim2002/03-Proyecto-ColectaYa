// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================
// ENUMS - Estados del sistema ColectaYa MVP
// =====================================================

enum Role {
  USER  // Usuario regular
  ADMIN // Administrador del sistema
}

enum CollectionStatus {
  ACTIVE     // Activa, recibiendo aportes (en proceso)
  COMPLETED  // Completada, meta alcanzada
  // TODOS es solo un filtro frontend
}

enum RuleType {
  GOAL_ONLY  // Solo retiro al 100% de meta
  THRESHOLD  // Retiro al alcanzar % umbral
  ANYTIME    // Retiro en cualquier momento
}

enum ContributionStatus {
  PAID     // Pagado exitosamente
  FAILED   // Pago fallido
}

enum WithdrawalStatus {
  REQUESTED // Solicitado
  PAID      // Pagado
  REJECTED  // Rechazado
}

// =====================================================
// MODELOS - Entidades principales ColectaYa MVP
// =====================================================

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  password  String
  name      String?  // ✅ AGREGADO - Para mostrar nombre en UI
  avatar    String?  // ✅ AGREGADO - Para avatares de usuario
  roles     Role[]   @default([USER])
  createdAt DateTime @default(now()) @db.Timestamptz

  // Relaciones
  ownedCollections Collection[]        @relation("CollectionOwner")
  memberships      CollectionMember[]
  contributions    Contribution[]
  withdrawals      Withdrawal[]

  @@index([email])
  @@map("users")
}

model Collection {
  id           String           @id @default(uuid()) @db.Uuid
  ownerId      String           @db.Uuid
  title        String
  description  String?
  imageUrl     String?          // ✅ AGREGADO - Para imágenes de colectas
  isPrivate    Boolean          @default(false)
  goalAmount   Decimal          @db.Decimal(12, 2)
  ruleType     RuleType
  ruleValue    Decimal?         @db.Decimal(5, 2) // ✅ RENOMBRADO de thresholdPct
  status       CollectionStatus @default(ACTIVE)
  deadlineAt   DateTime?        @db.Timestamptz
  createdAt    DateTime         @default(now()) @db.Timestamptz
  updatedAt    DateTime         @updatedAt @db.Timestamptz // ✅ AGREGADO - Para tracking de cambios

  // Relaciones
  owner         User               @relation("CollectionOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members       CollectionMember[]
  contributions Contribution[]
  withdrawals   Withdrawal[]
  stats         CollectionStats?   // ✅ RELACIÓN - Para estadísticas optimizadas

  @@index([ownerId])
  @@index([status])
  @@index([deadlineAt])
  @@index([isPrivate])  // ✅ NUEVO - Para queries de colectas públicas
  @@map("collections")
}

model CollectionMember {
  id           String    @id @default(uuid()) @db.Uuid
  collectionId String    @db.Uuid
  userId       String    @db.Uuid
  invitedAt    DateTime? @db.Timestamptz
  acceptedAt   DateTime? @db.Timestamptz
  addedBy      String?   @db.Uuid

  // Relaciones
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([collectionId, userId])
  @@index([collectionId])
  @@index([userId])
  @@map("collection_members")
}

model Contribution {
  id           String             @id @default(uuid()) @db.Uuid
  collectionId String             @db.Uuid
  userId       String?            @db.Uuid
  amount       Decimal            @db.Decimal(12, 2)
  status       ContributionStatus
  paymentRef   String?            // Referencia interna de pago
  createdAt    DateTime           @default(now()) @db.Timestamptz

  // Relaciones
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([collectionId])
  @@index([userId])
  @@index([status])
  @@index([paymentRef])
  @@map("contributions")
}

model Withdrawal {
  id           String           @id @default(uuid()) @db.Uuid
  collectionId String           @db.Uuid
  requestedBy  String?          @db.Uuid
  amount       Decimal          @db.Decimal(12, 2)
  status       WithdrawalStatus @default(REQUESTED)
  createdAt    DateTime         @default(now()) @db.Timestamptz
  processedAt  DateTime?        @db.Timestamptz

  // Relaciones
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  requester  User?      @relation(fields: [requestedBy], references: [id], onDelete: SetNull)

  @@index([collectionId])
  @@index([requestedBy])
  @@index([status])
  @@map("withdrawals")
}

// =====================================================
// TABLA DE ESTADÍSTICAS - Para optimizar consultas
// =====================================================

model CollectionStats {
  id                 String    @id @default(uuid()) @db.Uuid
  collectionId       String    @unique @db.Uuid
  currentAmount      Decimal   @default(0) @db.Decimal(12, 2)
  contributorsCount  Int       @default(0)
  contributionsCount Int       @default(0)
  lastContribution   DateTime? @db.Timestamptz
  lastUpdated        DateTime  @default(now()) @updatedAt @db.Timestamptz

  // Relación
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@index([lastUpdated])
  @@map("collection_stats")
}
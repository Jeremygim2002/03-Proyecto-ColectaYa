generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String             @id @default(uuid()) @db.Uuid
  email               String             @unique
  password            String
  roles               Role[]             @default([USER])
  createdAt           DateTime           @default(now()) @db.Timestamptz(6)
  name                String?
  avatar              String?
  memberships         CollectionMember[]
  ownedCollections    Collection[]       @relation("CollectionOwner")
  contributions       Contribution[]
  receivedInvitations Invitation[]       @relation("InvitedInvitations")
  sentInvitations     Invitation[]       @relation("InviterInvitations")
  withdrawals         Withdrawal[]

  @@index([email])
  @@map("users")
}

model Collection {
  id            String             @id @default(uuid()) @db.Uuid
  ownerId       String             @db.Uuid
  title         String
  description   String?
  isPrivate     Boolean            @default(false)
  goalAmount    Decimal            @db.Decimal(12, 2)
  ruleType      RuleType
  status        CollectionStatus   @default(ACTIVE)
  deadlineAt    DateTime?          @db.Timestamptz(6)
  createdAt     DateTime           @default(now()) @db.Timestamptz(6)
  imageUrl      String?
  ruleValue     Decimal?           @db.Decimal(5, 2)
  updatedAt     DateTime           @updatedAt @db.Timestamptz(6)
  members       CollectionMember[]
  stats         CollectionStats?
  owner         User               @relation("CollectionOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  contributions Contribution[]
  invitations   Invitation[]
  withdrawals   Withdrawal[]

  @@index([ownerId])
  @@index([status])
  @@index([deadlineAt])
  @@index([isPrivate])
  @@map("collections")
}

model Invitation {
  id           String           @id @default(uuid()) @db.Uuid
  collectionId String           @db.Uuid
  inviterId    String           @db.Uuid
  invitedId    String           @db.Uuid
  status       InvitationStatus @default(PENDING)
  createdAt    DateTime         @default(now()) @db.Timestamptz(6)
  respondedAt  DateTime?        @db.Timestamptz(6)
  collection   Collection       @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  invited      User             @relation("InvitedInvitations", fields: [invitedId], references: [id], onDelete: Cascade)
  inviter      User             @relation("InviterInvitations", fields: [inviterId], references: [id], onDelete: Cascade)

  @@unique([collectionId, invitedId])
  @@index([invitedId])
  @@index([collectionId])
  @@index([status])
  @@map("invitations")
}

model CollectionMember {
  id           String     @id @default(uuid()) @db.Uuid
  collectionId String     @db.Uuid
  userId       String     @db.Uuid
  invitedAt    DateTime?  @db.Timestamptz(6)
  acceptedAt   DateTime?  @db.Timestamptz(6)
  addedBy      String?    @db.Uuid
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([collectionId, userId])
  @@index([collectionId])
  @@index([userId])
  @@map("collection_members")
}

model Contribution {
  id           String             @id @default(uuid()) @db.Uuid
  collectionId String             @db.Uuid
  userId       String?            @db.Uuid
  amount       Decimal            @db.Decimal(12, 2)
  status       ContributionStatus
  paymentRef   String?
  createdAt    DateTime           @default(now()) @db.Timestamptz(6)
  collection   Collection         @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User?              @relation(fields: [userId], references: [id])

  @@index([collectionId])
  @@index([userId])
  @@index([status])
  @@index([paymentRef])
  @@map("contributions")
}

model Withdrawal {
  id           String           @id @default(uuid()) @db.Uuid
  collectionId String           @db.Uuid
  requestedBy  String?          @db.Uuid
  amount       Decimal          @db.Decimal(12, 2)
  status       WithdrawalStatus @default(REQUESTED)
  createdAt    DateTime         @default(now()) @db.Timestamptz(6)
  processedAt  DateTime?        @db.Timestamptz(6)
  collection   Collection       @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  requester    User?            @relation(fields: [requestedBy], references: [id])

  @@index([collectionId])
  @@index([requestedBy])
  @@index([status])
  @@map("withdrawals")
}

model CollectionStats {
  id                 String     @id @default(uuid()) @db.Uuid
  collectionId       String     @unique @db.Uuid
  currentAmount      Decimal    @default(0) @db.Decimal(12, 2)
  contributorsCount  Int        @default(0)
  contributionsCount Int        @default(0)
  lastContribution   DateTime?  @db.Timestamptz(6)
  lastUpdated        DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  collection         Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@index([lastUpdated])
  @@map("collection_stats")
}

enum Role {
  USER
  ADMIN
}

enum CollectionStatus {
  ACTIVE
  COMPLETED
}

enum RuleType {
  GOAL_ONLY
  ANYTIME
}

enum ContributionStatus {
  PAID
  FAILED
}

enum WithdrawalStatus {
  REQUESTED
  PAID
  REJECTED
}

enum InvitationStatus {
  ACCEPTED
  REJECTED
  PENDING
}
